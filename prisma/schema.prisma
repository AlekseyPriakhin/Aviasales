// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  secondName    String?
  email         String?         @unique
  emailVerified DateTime?
  password      String?
  phoneNumber   String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tickets Ticket[]
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Route {
  id Int @id @default(autoincrement())
  from String
  to String
  description String

  flights Flight[]
}

model Flight {
  id Int @id @default(autoincrement())
  company String
  date DateTime
  duration Int // Минуты
  departureAirport String
  departureAirportCode String
  arrivingAirport String
  arrivingAirportCode String
  routeId Int
  reservedSeatsCount Int
  totalSeatsCount Int
  availableSeatsCount Int

  route Route @relation(fields: [routeId], references: [id])
  ticketClasses TicketClass[]
}

model TicketClass {
  id Int @id @default(autoincrement())
  name String
  total Int
  reserved Int
  available Int
  flightId Int
  currency String
  cost Float
  order Int

  flight Flight @relation( fields: [flightId], references: [id])
  tickets Ticket[]
}

model Ticket {
  id Int @id @default(autoincrement())
  createdAt DateTime
  seat Int
  userId String
  ticketClassId Int

  ticketClass TicketClass @relation(fields: [ticketClassId], references: [id])
  user User @relation(fields: [userId], references: [id])
}